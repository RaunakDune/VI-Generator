/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package VIGen;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JDialog;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.*;

class CustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".tif" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".tif");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return "TIFF Images (*.tif)";
        }
    }

/**
 *
 * @author RaunakS
 */
public class FileChooser extends javax.swing.JFrame {
    
    int Sensor;
    
    String MIRImage;
    Boolean MIRImageSet;
    
    String NIRImage;
    Boolean NIRImageSet;
    
    String RImage;
    Boolean RImageSet;
    
    String GImage;
    Boolean GImageSet;
    
    String BImage;
    Boolean BImageSet;
    
    String MBImageL3;
    Boolean MBImageL3Set;
    
    String MBImageL2;
    Boolean MBImageL2Set;
    
    boolean multiBand;

    /**
     * Creates new form FileChooser
     */
    public FileChooser() {
        initComponents();
        multiBand = MIRImageSet = NIRImageSet = RImageSet = GImageSet = BImageSet = MBImageL3Set = MBImageL2Set = false;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();
        Image = new javax.swing.JMenu();
        OpenMIR = new javax.swing.JMenuItem();
        OpenNIR = new javax.swing.JMenuItem();
        OpenRED = new javax.swing.JMenuItem();
        OpenGREEN = new javax.swing.JMenuItem();
        OpenBLUE = new javax.swing.JMenuItem();
        OpenMultiBandL2 = new javax.swing.JMenuItem();
        OpenMultiBandL3 = new javax.swing.JMenuItem();
        Tools = new javax.swing.JMenu();
        CheckImage = new javax.swing.JMenuItem();
        ViewImage = new javax.swing.JMenuItem();
        ClearImage = new javax.swing.JMenuItem();
        Indices = new javax.swing.JMenu();
        NDVI = new javax.swing.JMenuItem();
        RVI = new javax.swing.JMenuItem();
        EVI = new javax.swing.JMenuItem();
        SAVI = new javax.swing.JMenuItem();
        OSAVI = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        Usage = new javax.swing.JMenuItem();
        VIpdf = new javax.swing.JMenuItem();
        AboutUs = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Open Image");
        fileChooser.setFileFilter(new CustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vegetation Index Generator");
        setBackground(new java.awt.Color(51, 153, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/2.jpg"))); // NOI18N
        jLabel1.setAutoscrolls(true);

        File.setText("File");

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/exit.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.setToolTipText("Exit the Program");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Image.setText("Image");
        Image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageActionPerformed(evt);
            }
        });

        OpenMIR.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        OpenMIR.setText("Set MIR Image");
        OpenMIR.setToolTipText("Open a single band Middle InfraRed Image in TIFF format");
        OpenMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMIRActionPerformed(evt);
            }
        });
        Image.add(OpenMIR);

        OpenNIR.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        OpenNIR.setText("Set NIR Image");
        OpenNIR.setToolTipText("Open a single band Near InfraRed Image in TIFF format");
        OpenNIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenNIRActionPerformed(evt);
            }
        });
        Image.add(OpenNIR);

        OpenRED.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        OpenRED.setText("Set RED Image");
        OpenRED.setToolTipText("Open a single band Red Image in TIFF format");
        OpenRED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenREDActionPerformed(evt);
            }
        });
        Image.add(OpenRED);

        OpenGREEN.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        OpenGREEN.setText("Set GREEN Image");
        OpenGREEN.setToolTipText("Open a single band Green Image in TIFF format");
        OpenGREEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenGREENActionPerformed(evt);
            }
        });
        Image.add(OpenGREEN);

        OpenBLUE.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        OpenBLUE.setText("Set BLUE Image");
        OpenBLUE.setToolTipText("Open a single band Blue Image in TIFF format");
        OpenBLUE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenBLUEActionPerformed(evt);
            }
        });
        Image.add(OpenBLUE);

        OpenMultiBandL2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        OpenMultiBandL2.setText("Set Multi Band Image from LISS II");
        OpenMultiBandL2.setToolTipText("Open a LISS II MultiSpectral 4 Band (B/G/R/NIR) in TIFF format");
        OpenMultiBandL2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMultiBandL2ActionPerformed(evt);
            }
        });
        Image.add(OpenMultiBandL2);

        OpenMultiBandL3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        OpenMultiBandL3.setText("Set Multi Band Image from LISS III");
        OpenMultiBandL3.setToolTipText("Open a LISS III MultiSpectral 4 Band (G/R/NIR/MIR) in TIFF format");
        OpenMultiBandL3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMultiBandL3ActionPerformed(evt);
            }
        });
        Image.add(OpenMultiBandL3);

        jMenuBar1.add(Image);

        Tools.setText("Tools");

        CheckImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        CheckImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/current.png"))); // NOI18N
        CheckImage.setText("Currently Set Images");
        CheckImage.setToolTipText("Check which images are currently selected");
        CheckImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckImageActionPerformed(evt);
            }
        });
        Tools.add(CheckImage);

        ViewImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        ViewImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/view_set.png"))); // NOI18N
        ViewImage.setText("View Set Images");
        ViewImage.setToolTipText("Display all currently selected Images");
        ViewImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewImageActionPerformed(evt);
            }
        });
        Tools.add(ViewImage);

        ClearImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        ClearImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/clear_all.png"))); // NOI18N
        ClearImage.setText("Clear All Images");
        ClearImage.setToolTipText("Clear all currently selected Images");
        ClearImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearImageActionPerformed(evt);
            }
        });
        Tools.add(ClearImage);

        jMenuBar1.add(Tools);

        Indices.setText("Indices");

        NDVI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        NDVI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/ndvi.png"))); // NOI18N
        NDVI.setText("NDVI");
        NDVI.setToolTipText("Generate the Normalized Difference Vegetation Index");
        NDVI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NDVIActionPerformed(evt);
            }
        });
        Indices.add(NDVI);

        RVI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        RVI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/rvi.png"))); // NOI18N
        RVI.setText("RVI");
        RVI.setToolTipText("Generate the Ratio Vegetation Index (also known as the Simple Ratio)");
        RVI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RVIActionPerformed(evt);
            }
        });
        Indices.add(RVI);

        EVI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        EVI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/evi.png"))); // NOI18N
        EVI.setText("EVI");
        EVI.setToolTipText("Generate the Enhanced Vegetation Index");
        EVI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EVIActionPerformed(evt);
            }
        });
        Indices.add(EVI);

        SAVI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SAVI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/savi.png"))); // NOI18N
        SAVI.setText("SAVI");
        SAVI.setToolTipText("Generate the Soil Adjusted Vegetation Index");
        SAVI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVIActionPerformed(evt);
            }
        });
        Indices.add(SAVI);

        OSAVI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        OSAVI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/osavi.png"))); // NOI18N
        OSAVI.setText("OSAVI");
        OSAVI.setToolTipText("Generate the Optimized Soil Adjusted Vegetation Index");
        OSAVI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OSAVIActionPerformed(evt);
            }
        });
        OSAVI.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                OSAVIVetoableChange(evt);
            }
        });
        Indices.add(OSAVI);

        jMenuBar1.add(Indices);

        Help.setText("Help");

        Usage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/usage.png"))); // NOI18N
        Usage.setText("Usage");
        Usage.setToolTipText("A guide to using this application");
        Usage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsageActionPerformed(evt);
            }
        });
        Help.add(Usage);

        VIpdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/veg_ind.png"))); // NOI18N
        VIpdf.setText("Vegetation Indices");
        VIpdf.setToolTipText("Some fundamentals of Vegetation Indices");
        VIpdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIpdfActionPerformed(evt);
            }
        });
        Help.add(VIpdf);

        AboutUs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VIGen/about_us.png"))); // NOI18N
        AboutUs.setText("About Us");
        AboutUs.setToolTipText("The Creator");
        AboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutUsActionPerformed(evt);
            }
        });
        Help.add(AboutUs);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DialogDisplayer(String title, String MessageText) {
        JFrame frame = new JFrame();
        final JDialog dialog = new JDialog(frame,title);
        JLabel label = new JLabel("<html><p align=center>"+MessageText);
        label.setHorizontalAlignment(JLabel.CENTER);
        Font font = label.getFont();
        label.setFont(label.getFont().deriveFont(Font.PLAIN,
                                                 14.0f));

        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialog.setVisible(false);
                dialog.dispose();
            }
        });
        JPanel closePanel = new JPanel();
        closePanel.setLayout(new BoxLayout(closePanel,
                                           BoxLayout.LINE_AXIS));
        closePanel.add(Box.createHorizontalGlue());
        closePanel.add(closeButton);
        closePanel.setBorder(BorderFactory.
            createEmptyBorder(0,0,5,5));

        JPanel contentPane = new JPanel(new BorderLayout());
        contentPane.add(label, BorderLayout.CENTER);
        contentPane.add(closePanel, BorderLayout.PAGE_END);
        contentPane.setOpaque(true);
        dialog.setContentPane(contentPane);

        //Show it.
        dialog.pack();
        dialog.setLocationRelativeTo(frame);
        dialog.setVisible(true);
        dialog.pack();
        dialog.setVisible(true);
    }
    
    private void Choice(String image, String title){
        try {
            String Title = "Display Image";
            String Message = "<html><p align=center>"+"Do you wish to view this Image ?";

            int response = JOptionPane.showConfirmDialog(null, Message, Title,JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                new ImageDisplayer(image,title);
            }
        } catch(Exception ex) {
            DialogDisplayer("ERROR", "Cannot Display"+image+"<br>Please check the image and try again.");
        }
    }
    
    private void OpenNIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenNIRActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
            // What to do with the file, e.g. display it in a TextArea
                NIRImage = file.getAbsolutePath();
                NIRImageSet = true;
                Choice(NIRImage,"Near InfraRed");
//              textarea.read( new FileReader( file.getAbsolutePath() ), null );
            } catch (Exception ex) {
                DialogDisplayer("ERROR","problem accessing file"+file.getAbsolutePath());
//                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            DialogDisplayer("Warning", "NIR File access cancelled by user.");
//            System.out.println("NIR File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenNIRActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
                // TODO add your handling code here:
    }//GEN-LAST:event_ExitActionPerformed

    private void OpenREDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenREDActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                RImage = file.getAbsolutePath();
                RImageSet = true;
                Choice(RImage,"RED");
            } catch (Exception ex) {
                DialogDisplayer("ERROR","problem accessing file"+file.getAbsolutePath());
//                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            DialogDisplayer("Warning", "RED File access cancelled by user.");
//            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenREDActionPerformed

    private void NDVIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NDVIActionPerformed
        try {
            if(multiBand){
                if(Sensor == 3){
                    NDVI nd3 = new NDVI(MBImageL3, 3);
                }
                else {
                    NDVI nd2 = new NDVI(MBImageL2, 2);
                }
            }
            else{
                NDVI nd_sep = new NDVI(RImage, NIRImage);
            }
        } catch (Exception ex) {
            DialogDisplayer("ERROR", "Please Check whether Input Images have been correctly set");
//            System.out.println("problem accessing files : "+RImage + " and "+ NIRImage);
        }
    }//GEN-LAST:event_NDVIActionPerformed

    private void ImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ImageActionPerformed

    private void OpenMultiBandL3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMultiBandL3ActionPerformed
        // TODO add your handling code here:
        multiBand = true;
        Sensor = 3;
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                MBImageL3 = file.getAbsolutePath();
                MBImageL3Set = true;
                Choice(MBImageL3,"LISS III");
            } catch (Exception ex) {
                DialogDisplayer("ERROR","problem accessing file"+file.getAbsolutePath());
//                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
//            System.out.println("File access cancelled by user.");
        }
        
    }//GEN-LAST:event_OpenMultiBandL3ActionPerformed

    private void OpenGREENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenGREENActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                GImage = file.getAbsolutePath();
                GImageSet = true;
                Choice(GImage,"GREEN");
            }   catch (Exception ex) {
                DialogDisplayer("ERROR","problem accessing file"+file.getAbsolutePath());
//                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
//            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenGREENActionPerformed

    private void OpenBLUEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenBLUEActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                BImage = file.getAbsolutePath();
                BImageSet = true;
                Choice(BImage,"BLUE");
            }   catch (Exception ex) {
                DialogDisplayer("ERROR","problem accessing file"+file.getAbsolutePath());
//                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
//            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenBLUEActionPerformed

    private void RVIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RVIActionPerformed
        // TODO add your handling code here:
        try {
            if(multiBand){
                if (Sensor == 3) {
                    RVI rvi3 = new RVI(MBImageL3, 3);
                }
                else {
                    RVI rvi2 = new RVI(MBImageL2, 2);
                }
            }
            else{
                RVI rvi_sep = new RVI(RImage, NIRImage);
            }
        } catch (Exception ex) {
            DialogDisplayer("ERROR", "Please Check whether Input Images have been correctly set.");
//            System.out.println("problem accessing files : "+RImage + " and "+ NIRImage);
        }
    }//GEN-LAST:event_RVIActionPerformed

    private void OpenMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMIRActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                MIRImage = file.getAbsolutePath();
                MIRImageSet = true;
                Choice(MIRImage,"Middle Infrared");
            }   catch (Exception ex) {
                DialogDisplayer("ERROR","problem accessing file"+file.getAbsolutePath());
//                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
//            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenMIRActionPerformed

    private void OpenMultiBandL2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMultiBandL2ActionPerformed
        // TODO add your handling code here:
        multiBand = true;
        Sensor = 2;
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                MBImageL2 = file.getAbsolutePath();
                MBImageL2Set = true;
                Choice(MBImageL2,"LISS II");
            } catch (Exception ex) {
                DialogDisplayer("ERROR","problem accessing file"+file.getAbsolutePath());
//                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
//            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenMultiBandL2ActionPerformed

    private void EVIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EVIActionPerformed
        // TODO add your handling code here:
        if (Sensor == 3){
            DialogDisplayer("ERROR", "LISS III does not have the BLUE band. Please Select the LISS II Sensor.");
            return;
        }
        try {
            double param[] = new double[]{2.5,6,7.5,1};
            String Title = "Set Default Values";
            String Message = "<html><p align=center>"+"Do you wish to use default MODIS parameters for EVI ?"+
                    "<br>G = 2.5, C1 = 6, C2 = 7.5, L = 1";

            int response = JOptionPane.showConfirmDialog(null, Message, Title,JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
//                System.out.println("No button clicked");
                String G = JOptionPane.showInputDialog(null, "Value of G : ", "Gain Factor", 3);
                String C1 = JOptionPane.showInputDialog(null, "Value of C1 : ", "Coefficient of Aerosol Resistance", 3);
                String C2 = JOptionPane.showInputDialog(null, "Value of C2 : ", "Coefficient of Aerosol Resistance", 3);
                String L = JOptionPane.showInputDialog(null, "Value of L : ", "Canopy Background Adjustment", 3);

                if(G != null && C1 != null && C2 != null && L != null ) {
                    param[0] = Double.parseDouble(G);
                    param[1] = Double.parseDouble(C1);
                    param[2] = Double.parseDouble(C2);
                    param[3] = Double.parseDouble(L);

                    if(multiBand) {
                        EVI rv = new EVI(MBImageL2,param);
                    }
                    else{
                        EVI rv_sep = new EVI(new String[]{NIRImage,RImage,BImage}, param); 
                    }
                }
                else {
                    DialogDisplayer("Warning", "Not entering correct parameters may lead to unpredictable behaviour"+
                            "<br> Please Try Again.");
                }
            } else if (response == JOptionPane.YES_OPTION) {
                if(multiBand) {
                    EVI rv_default = new EVI(MBImageL2,param);
                }
                else{
                    EVI rv_default_sep = new EVI(new String[]{NIRImage,RImage,BImage}, param); 
                }
            }
        } catch (HeadlessException | NumberFormatException ex) {
            DialogDisplayer("ERROR", "Please Check whether Input Images have been correctly set");
        }
    }//GEN-LAST:event_EVIActionPerformed

    private void VIpdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIpdfActionPerformed
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
//                StringBuffer paths = new StringBuffer();
//                for (URL url : ((URLClassLoader) (Thread.currentThread().getContextClassLoader())).getURLs()){
//                    System.out.println(url);
//                    paths.append(url);
//                }
                URL path = ClassLoader.getSystemResource("\\VIGen\\Vegetation-spectral-indices.pdf");
                if(path==null) {
//                    URL modpath = this.getClass().getProtectionDomain().getCodeSource().getLocation();
//                    DialogDisplayer("JAR File Location",modpath.toString());
                    String curPath = "Vegetation-spectral-indices.pdf";
                    try {
                        File f = new File(curPath);
                        f.setReadOnly();
                        Desktop.getDesktop().open(f);
                    } catch (Exception ex) {
                        DialogDisplayer("File Open Error", ex.toString());
                    }
                }
                File f = new File(path.toURI());
                f.setReadOnly();
                Desktop.getDesktop().open(f);
            } catch (URISyntaxException | IOException ex) {
                // no application registered for PDFs
                DialogDisplayer("ERROR", "Please install Adobe Acrobat Reader");
            }
        }
    }//GEN-LAST:event_VIpdfActionPerformed

    private void AboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutUsActionPerformed
        // TODO add your handling code here:
        String title = "About Us";
        String text = "This Application was designed and built by"+"<br><br>Raunak Sarbajna<br>RaunakS@hotmail.com";
        DialogDisplayer(title,text);
    }//GEN-LAST:event_AboutUsActionPerformed

    private void SAVIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVIActionPerformed
        // TODO add your handling code here:
        try {
            String Title = "Set Default Values";
            String Message = "<html><p align=center>"+"Do you wish to use the default parameter for SAVI ?"+
                    "<br>L = 0.5<br>where<br>0 : High Vegetation Cover; 1 : Low Vegetation Cover";

            int response = JOptionPane.showConfirmDialog(null, Message, Title,JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
                String L = JOptionPane.showInputDialog(null, "Value of L : ", "Canopy Background Adjustment", 3);
                if (L != null) {
                    if (multiBand) {
                        if (Sensor == 3) {
                            SAVI svi3 = new SAVI(MBImageL3,Double.parseDouble(L),3);
                        } else {
                            SAVI svi2 = new SAVI(MBImageL2,Double.parseDouble(L),2);
                        }
                    }
                    else {
                        SAVI svi_sep = new SAVI(NIRImage, RImage, Double.parseDouble(L));
                    }
                }
            } else if (response == JOptionPane.YES_OPTION) {
                if (multiBand) {
                    if (Sensor == 3) {
                        SAVI svi3 = new SAVI(MBImageL3,(double) 0.5,3);
                    } else {
                        SAVI svi2 = new SAVI(MBImageL2,(double) 0.5,2);
                    }
                }
                else {
                    SAVI svi_sep = new SAVI(NIRImage, RImage, (double) 0.5);
                }
            }
        } catch (HeadlessException | NumberFormatException ex) {
            DialogDisplayer("ERROR", "Please Check whether Input Images have been correctly set");
        }
    }//GEN-LAST:event_SAVIActionPerformed

    private void OSAVIVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_OSAVIVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_OSAVIVetoableChange

    private void OSAVIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OSAVIActionPerformed
        // TODO add your handling code here:
        try {
            if (multiBand) {
                if (Sensor == 3) {
                    SAVI svi3 = new SAVI(MBImageL3,(double) 0.16,3);
                } else {
                    SAVI svi2 = new SAVI(MBImageL2,(double) 0.16,2);
                }
            }
            else {
                SAVI svi_sep = new SAVI(NIRImage, RImage, (double) 0.16);
            }
        } catch (Exception ex) {
            DialogDisplayer("ERROR", "Please Check whether Input Images have been correctly set");
        }
    }//GEN-LAST:event_OSAVIActionPerformed

    private void UsageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsageActionPerformed
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
//                for (URL url : ((URLClassLoader) (Thread.currentThread().getContextClassLoader())).getURLs())
//                    System.out.println(url);
                URL path = ClassLoader.getSystemResource("\\VIGen\\Guide.txt");
                if(path==null) {
                     String curPath = "Guide.txt";
                    try {
                        File f = new File(curPath);
                        f.setReadOnly();
                        Desktop.getDesktop().open(f);
                    } catch (Exception ex) {
                        DialogDisplayer("File Open Error", ex.toString());
                        DialogDisplayer("ERROR", "The Help File was not found");
                    }
                }
                File f = new File(path.toURI());
                f.setReadOnly();
                Desktop.getDesktop().open(f);
            } catch (URISyntaxException | IOException ex) {
                // no application registered for PDFs
                DialogDisplayer("ERROR", "Please install a text file reader.<br> Wait, what ?");
            }
        }
    }//GEN-LAST:event_UsageActionPerformed

    private void CheckImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckImageActionPerformed
        // TODO add your handling code here:
        String title = "Currently Set Images";
        String RImageStat, GImageStat, BImageStat, NIRImageStat, MIRImageStat, MBImageL2Stat, MBImageL3Stat;

        if (RImageSet == true)
        RImageStat = RImage;
        else
        RImageStat = "NOT SET";

        if (GImageSet == true)
        GImageStat = GImage;
        else
        GImageStat = "NOT SET";

        if (BImageSet == true)
        BImageStat = BImage;
        else
        BImageStat = "NOT SET";

        if (NIRImageSet == true)
        NIRImageStat = NIRImage;
        else
        NIRImageStat = "NOT SET";

        if (MIRImageSet == true)
        MIRImageStat = MIRImage;
        else
        MIRImageStat = "NOT SET";

        if (MIRImageSet == true)
        MIRImageStat = MIRImage;
        else
        MIRImageStat = "NOT SET";

        if (MBImageL2Set == true)
        MBImageL2Stat = MBImageL2;
        else
        MBImageL2Stat = "NOT SET";

        if (MBImageL3Set == true)
        MBImageL3Stat = MBImageL3;
        else
        MBImageL3Stat = "NOT SET";

        StringBuilder Message = new StringBuilder();
        Message.append("Currently Selected Images : ").append("<br>");
        Message.append("RED : ").append(RImageStat).append("<br>");
        Message.append("GREEN : ").append(GImageStat).append("<br>");
        Message.append("BLUE : ").append(BImageStat).append("<br>");
        Message.append("Near InfraRed : ").append(NIRImageStat).append("<br>");
        Message.append("Middle InfraRed : ").append(MIRImageStat).append("<br>");
        Message.append("LISS II Image : ").append(MBImageL2Stat).append("<br>");
        Message.append("LISS III Image : ").append(MBImageL3Stat).append("<br>");

        DialogDisplayer(title, Message.toString());

    }//GEN-LAST:event_CheckImageActionPerformed

    private void ClearImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearImageActionPerformed
        // TODO add your handling code here:
        multiBand = MIRImageSet = NIRImageSet = RImageSet = GImageSet = BImageSet = MBImageL3Set = MBImageL2Set = false;
        MIRImage = NIRImage = RImage = GImage = BImage = MBImageL3 = MBImageL2 = null;
    }//GEN-LAST:event_ClearImageActionPerformed

    private void ViewImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewImageActionPerformed
        // TODO add your handling code here:
        if ((MIRImageSet || NIRImageSet || RImageSet || GImageSet || BImageSet || MBImageL3Set || MBImageL2Set) == false){
            DialogDisplayer("ERROR","No Image is Currently Set for Viewing<br>Use the Image menu to select some Images");
            return;
        }
        if (MIRImageSet == true){
            new ImageDisplayer(MIRImage, "Middle InfraRed Image");
        }
        if (NIRImageSet == true){
            new ImageDisplayer(NIRImage, "Near InfraRed Image");
        }
        if (RImageSet == true){
            new ImageDisplayer(RImage, "RED Image");
        }
        if (GImageSet == true){
            new ImageDisplayer(GImage, "Green Image");
        }
        if (BImageSet == true){
            new ImageDisplayer(BImage, "BLUE Image");
        }
        if (MBImageL2Set == true){
            new ImageDisplayer(MBImageL2, "LISS II Image");
        }
        if (MBImageL3Set == true){
            new ImageDisplayer(MBImageL3, "LISS III Image");
        }
    }//GEN-LAST:event_ViewImageActionPerformed
    
    private String resolveChoice(String choice) throws Exception {
        if (choice.contains("RED"))
            return RImage;
        else if (choice.contains("GREEN"))
            return GImage;
        else if (choice.contains("BLUE"))
            return BImage;
        else if (choice.contains("NEAR IR"))
            return NIRImage;
        else if (choice.contains("MID IR"))
            return MIRImage;
        else if (choice.contains("LISS II"))
            return MBImageL2;
        else if (choice.contains("LISS OII"))
            return MBImageL3;
        else
            throw new Exception("Illegal Choice");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FileChooser().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutUs;
    private javax.swing.JMenuItem CheckImage;
    private javax.swing.JMenuItem ClearImage;
    private javax.swing.JMenuItem EVI;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenu Image;
    private javax.swing.JMenu Indices;
    private javax.swing.JMenuItem NDVI;
    private javax.swing.JMenuItem OSAVI;
    private javax.swing.JMenuItem OpenBLUE;
    private javax.swing.JMenuItem OpenGREEN;
    private javax.swing.JMenuItem OpenMIR;
    private javax.swing.JMenuItem OpenMultiBandL2;
    private javax.swing.JMenuItem OpenMultiBandL3;
    private javax.swing.JMenuItem OpenNIR;
    private javax.swing.JMenuItem OpenRED;
    private javax.swing.JMenuItem RVI;
    private javax.swing.JMenuItem SAVI;
    private javax.swing.JMenu Tools;
    private javax.swing.JMenuItem Usage;
    private javax.swing.JMenuItem VIpdf;
    private javax.swing.JMenuItem ViewImage;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
